"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _2 = require("..");

var _useRoutePath = require("./useRoutePath");

var _utils = require("../utils");

var useRouteData = function useRouteData() {
  var routePath = (0, _useRoutePath.useRoutePath)(); // eslint-disable-next-line

  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      _ = _useState2[0],
      setCount = _useState2[1];

  (0, _react.useEffect)(function () {
    return (0, _2.onReloadClientData)(function () {
      setCount(function (old) {
        return old + 1;
      });
    });
  });
  var routeError = _2.routeErrorByPath[routePath];
  var routeInfo = routeError ? _2.routeInfoByPath['404'] : _2.routeInfoByPath[routePath]; // If there was an error reported for this path, throw an error
  // unless there is data for the 404 page

  if (routeError && (!routeInfo || !routeInfo.data)) {
    throw new Error("React-Static: useRouteData() could not find any data for this route: ".concat(routePath, ". If this is a dynamic route, please remove any calls to useRouteData() from this route's components"));
  }

  var targetRouteInfoPath = routeInfo ? routeInfo.path : routePath; // If we need to load data, suspend while it's requested

  if (shouldLoadData(routeInfo)) {
    throw Promise.all([new Promise(function (resolve) {
      return setTimeout(resolve, process.env.REACT_STATIC_MIN_LOAD_TIME);
    }), (0, _2.prefetch)(targetRouteInfoPath, {
      priority: true
    })]);
  } // Otherwise, return all of the data


  return (0, _utils.getFullRouteData)(routeInfo);
};

var _default = useRouteData;
exports["default"] = _default;

function shouldLoadData(routeInfo) {
  if (!routeInfo || !routeInfo.data) {
    return true;
  }

  return shouldLoadSharedData(routeInfo);
}

function shouldLoadSharedData(routeInfo) {
  return hasPropHashes(routeInfo) && !routeInfo.sharedData;
}

function hasPropHashes(routeInfo) {
  return routeInfo.sharedHashesByProp && Object.keys(routeInfo.sharedHashesByProp).length > 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9icm93c2VyL2hvb2tzL3VzZVJvdXRlRGF0YS5qcyJdLCJuYW1lcyI6WyJ1c2VSb3V0ZURhdGEiLCJyb3V0ZVBhdGgiLCJfIiwic2V0Q291bnQiLCJvbGQiLCJyb3V0ZUVycm9yIiwicm91dGVFcnJvckJ5UGF0aCIsInJvdXRlSW5mbyIsInJvdXRlSW5mb0J5UGF0aCIsImRhdGEiLCJFcnJvciIsInRhcmdldFJvdXRlSW5mb1BhdGgiLCJwYXRoIiwic2hvdWxkTG9hZERhdGEiLCJQcm9taXNlIiwiYWxsIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfU1RBVElDX01JTl9MT0FEX1RJTUUiLCJwcmlvcml0eSIsInNob3VsZExvYWRTaGFyZWREYXRhIiwiaGFzUHJvcEhhc2hlcyIsInNoYXJlZERhdGEiLCJzaGFyZWRIYXNoZXNCeVByb3AiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQU1BOztBQUNBOztBQUVBLElBQU1BLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQU07QUFDekIsTUFBTUMsU0FBUyxHQUFHLGlDQUFsQixDQUR5QixDQUV6Qjs7QUFGeUIsa0JBR0gscUJBQVMsQ0FBVCxDQUhHO0FBQUE7QUFBQSxNQUdsQkMsQ0FIa0I7QUFBQSxNQUdmQyxRQUhlOztBQUt6Qix3QkFBVTtBQUFBLFdBQ1IsMkJBQW1CLFlBQU07QUFDdkJBLE1BQUFBLFFBQVEsQ0FBQyxVQUFBQyxHQUFHO0FBQUEsZUFBSUEsR0FBRyxHQUFHLENBQVY7QUFBQSxPQUFKLENBQVI7QUFDRCxLQUZELENBRFE7QUFBQSxHQUFWO0FBTUEsTUFBTUMsVUFBVSxHQUFHQyxvQkFBaUJMLFNBQWpCLENBQW5CO0FBQ0EsTUFBTU0sU0FBUyxHQUFHRixVQUFVLEdBQ3hCRyxtQkFBZ0IsS0FBaEIsQ0FEd0IsR0FFeEJBLG1CQUFnQlAsU0FBaEIsQ0FGSixDQVp5QixDQWdCekI7QUFDQTs7QUFDQSxNQUFJSSxVQUFVLEtBQUssQ0FBQ0UsU0FBRCxJQUFjLENBQUNBLFNBQVMsQ0FBQ0UsSUFBOUIsQ0FBZCxFQUFtRDtBQUNqRCxVQUFNLElBQUlDLEtBQUosZ0ZBQ29FVCxTQURwRSwwR0FBTjtBQUdEOztBQUVELE1BQU1VLG1CQUFtQixHQUFHSixTQUFTLEdBQUdBLFNBQVMsQ0FBQ0ssSUFBYixHQUFvQlgsU0FBekQsQ0F4QnlCLENBMEJ6Qjs7QUFDQSxNQUFJWSxjQUFjLENBQUNOLFNBQUQsQ0FBbEIsRUFBK0I7QUFDN0IsVUFBTU8sT0FBTyxDQUFDQyxHQUFSLENBQVksQ0FDaEIsSUFBSUQsT0FBSixDQUFZLFVBQUFFLE9BQU87QUFBQSxhQUNqQkMsVUFBVSxDQUFDRCxPQUFELEVBQVVFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQywwQkFBdEIsQ0FETztBQUFBLEtBQW5CLENBRGdCLEVBSWhCLGlCQUFTVCxtQkFBVCxFQUE4QjtBQUFFVSxNQUFBQSxRQUFRLEVBQUU7QUFBWixLQUE5QixDQUpnQixDQUFaLENBQU47QUFNRCxHQWxDd0IsQ0FvQ3pCOzs7QUFDQSxTQUFPLDZCQUFpQmQsU0FBakIsQ0FBUDtBQUNELENBdENEOztlQXdDZVAsWTs7O0FBRWYsU0FBU2EsY0FBVCxDQUF3Qk4sU0FBeEIsRUFBbUM7QUFDakMsTUFBSSxDQUFDQSxTQUFELElBQWMsQ0FBQ0EsU0FBUyxDQUFDRSxJQUE3QixFQUFtQztBQUNqQyxXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPYSxvQkFBb0IsQ0FBQ2YsU0FBRCxDQUEzQjtBQUNEOztBQUVELFNBQVNlLG9CQUFULENBQThCZixTQUE5QixFQUF5QztBQUN2QyxTQUFPZ0IsYUFBYSxDQUFDaEIsU0FBRCxDQUFiLElBQTRCLENBQUNBLFNBQVMsQ0FBQ2lCLFVBQTlDO0FBQ0Q7O0FBRUQsU0FBU0QsYUFBVCxDQUF1QmhCLFNBQXZCLEVBQWtDO0FBQ2hDLFNBQ0VBLFNBQVMsQ0FBQ2tCLGtCQUFWLElBQ0FDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZcEIsU0FBUyxDQUFDa0Isa0JBQXRCLEVBQTBDRyxNQUExQyxHQUFtRCxDQUZyRDtBQUlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge1xyXG4gIHByZWZldGNoLFxyXG4gIHJvdXRlSW5mb0J5UGF0aCxcclxuICByb3V0ZUVycm9yQnlQYXRoLFxyXG4gIG9uUmVsb2FkQ2xpZW50RGF0YSxcclxufSBmcm9tICcuLidcclxuaW1wb3J0IHsgdXNlUm91dGVQYXRoIH0gZnJvbSAnLi91c2VSb3V0ZVBhdGgnXHJcbmltcG9ydCB7IGdldEZ1bGxSb3V0ZURhdGEgfSBmcm9tICcuLi91dGlscydcclxuXHJcbmNvbnN0IHVzZVJvdXRlRGF0YSA9ICgpID0+IHtcclxuICBjb25zdCByb3V0ZVBhdGggPSB1c2VSb3V0ZVBhdGgoKVxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gIGNvbnN0IFtfLCBzZXRDb3VudF0gPSB1c2VTdGF0ZSgwKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT5cclxuICAgIG9uUmVsb2FkQ2xpZW50RGF0YSgoKSA9PiB7XHJcbiAgICAgIHNldENvdW50KG9sZCA9PiBvbGQgKyAxKVxyXG4gICAgfSlcclxuICApXHJcblxyXG4gIGNvbnN0IHJvdXRlRXJyb3IgPSByb3V0ZUVycm9yQnlQYXRoW3JvdXRlUGF0aF1cclxuICBjb25zdCByb3V0ZUluZm8gPSByb3V0ZUVycm9yXHJcbiAgICA/IHJvdXRlSW5mb0J5UGF0aFsnNDA0J11cclxuICAgIDogcm91dGVJbmZvQnlQYXRoW3JvdXRlUGF0aF1cclxuXHJcbiAgLy8gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHJlcG9ydGVkIGZvciB0aGlzIHBhdGgsIHRocm93IGFuIGVycm9yXHJcbiAgLy8gdW5sZXNzIHRoZXJlIGlzIGRhdGEgZm9yIHRoZSA0MDQgcGFnZVxyXG4gIGlmIChyb3V0ZUVycm9yICYmICghcm91dGVJbmZvIHx8ICFyb3V0ZUluZm8uZGF0YSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgYFJlYWN0LVN0YXRpYzogdXNlUm91dGVEYXRhKCkgY291bGQgbm90IGZpbmQgYW55IGRhdGEgZm9yIHRoaXMgcm91dGU6ICR7cm91dGVQYXRofS4gSWYgdGhpcyBpcyBhIGR5bmFtaWMgcm91dGUsIHBsZWFzZSByZW1vdmUgYW55IGNhbGxzIHRvIHVzZVJvdXRlRGF0YSgpIGZyb20gdGhpcyByb3V0ZSdzIGNvbXBvbmVudHNgXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBjb25zdCB0YXJnZXRSb3V0ZUluZm9QYXRoID0gcm91dGVJbmZvID8gcm91dGVJbmZvLnBhdGggOiByb3V0ZVBhdGhcclxuXHJcbiAgLy8gSWYgd2UgbmVlZCB0byBsb2FkIGRhdGEsIHN1c3BlbmQgd2hpbGUgaXQncyByZXF1ZXN0ZWRcclxuICBpZiAoc2hvdWxkTG9hZERhdGEocm91dGVJbmZvKSkge1xyXG4gICAgdGhyb3cgUHJvbWlzZS5hbGwoW1xyXG4gICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+XHJcbiAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfTUlOX0xPQURfVElNRSlcclxuICAgICAgKSxcclxuICAgICAgcHJlZmV0Y2godGFyZ2V0Um91dGVJbmZvUGF0aCwgeyBwcmlvcml0eTogdHJ1ZSB9KSxcclxuICAgIF0pXHJcbiAgfVxyXG5cclxuICAvLyBPdGhlcndpc2UsIHJldHVybiBhbGwgb2YgdGhlIGRhdGFcclxuICByZXR1cm4gZ2V0RnVsbFJvdXRlRGF0YShyb3V0ZUluZm8pXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZVJvdXRlRGF0YVxyXG5cclxuZnVuY3Rpb24gc2hvdWxkTG9hZERhdGEocm91dGVJbmZvKSB7XHJcbiAgaWYgKCFyb3V0ZUluZm8gfHwgIXJvdXRlSW5mby5kYXRhKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNob3VsZExvYWRTaGFyZWREYXRhKHJvdXRlSW5mbylcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvdWxkTG9hZFNoYXJlZERhdGEocm91dGVJbmZvKSB7XHJcbiAgcmV0dXJuIGhhc1Byb3BIYXNoZXMocm91dGVJbmZvKSAmJiAhcm91dGVJbmZvLnNoYXJlZERhdGFcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzUHJvcEhhc2hlcyhyb3V0ZUluZm8pIHtcclxuICByZXR1cm4gKFxyXG4gICAgcm91dGVJbmZvLnNoYXJlZEhhc2hlc0J5UHJvcCAmJlxyXG4gICAgT2JqZWN0LmtleXMocm91dGVJbmZvLnNoYXJlZEhhc2hlc0J5UHJvcCkubGVuZ3RoID4gMFxyXG4gIClcclxufVxyXG4iXX0=