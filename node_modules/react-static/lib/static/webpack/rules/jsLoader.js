"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _babelPreset = _interopRequireDefault(require("../../../../babel-preset"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// we check which babel config file exists in the project root
var readBabelConfig = function readBabelConfig(root) {
  var babelFiles = ["".concat(root, "/.babelrc"), "".concat(root, "/.babelrc.js"), "".concat(root, "/babel.config.js")];
  var extendsFile = {};
  babelFiles.forEach(function (file) {
    try {
      _fsExtra["default"].statSync(file);

      extendsFile = {
        "extends": file
      };
    } catch (err) {// dont do anything
    }
  });
  return extendsFile;
};

function _default(_ref) {
  var config = _ref.config,
      stage = _ref.stage;
  var babelFile = {};
  var isRelativePath = config.paths.DIST.startsWith(config.paths.ROOT);

  if (!isRelativePath) {
    babelFile = readBabelConfig(config.paths.ROOT);
  }

  return {
    test: /\.(js|jsx|mjs)$/,
    include: [config.paths.PLUGINS, config.paths.SRC, /react-static-templates\.js/, /react-static-browser-plugins\.js/],
    use: [{
      loader: 'babel-loader',
      options: _objectSpread({}, babelFile, {
        root: config.paths.ROOT,
        presets: [[_babelPreset["default"], {
          modules: false
        }]],
        cacheDirectory: isRelativePath ? stage !== 'prod' : config.paths.TEMP,
        compact: stage === 'prod',
        highlightCode: true
      })
    }, 'react-hot-loader/webpack']
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdGF0aWMvd2VicGFjay9ydWxlcy9qc0xvYWRlci5qcyJdLCJuYW1lcyI6WyJyZWFkQmFiZWxDb25maWciLCJyb290IiwiYmFiZWxGaWxlcyIsImV4dGVuZHNGaWxlIiwiZm9yRWFjaCIsImZpbGUiLCJmcyIsInN0YXRTeW5jIiwiZXJyIiwiY29uZmlnIiwic3RhZ2UiLCJiYWJlbEZpbGUiLCJpc1JlbGF0aXZlUGF0aCIsInBhdGhzIiwiRElTVCIsInN0YXJ0c1dpdGgiLCJST09UIiwidGVzdCIsImluY2x1ZGUiLCJQTFVHSU5TIiwiU1JDIiwidXNlIiwibG9hZGVyIiwib3B0aW9ucyIsInByZXNldHMiLCJiYWJlbFByZXNldCIsIm1vZHVsZXMiLCJjYWNoZURpcmVjdG9yeSIsIlRFTVAiLCJjb21wYWN0IiwiaGlnaGxpZ2h0Q29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUE7QUFDQSxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUFDLElBQUksRUFBSTtBQUM5QixNQUFNQyxVQUFVLEdBQUcsV0FDZEQsSUFEYywwQkFFZEEsSUFGYyw2QkFHZEEsSUFIYyxzQkFBbkI7QUFNQSxNQUFJRSxXQUFXLEdBQUcsRUFBbEI7QUFFQUQsRUFBQUEsVUFBVSxDQUFDRSxPQUFYLENBQW1CLFVBQUFDLElBQUksRUFBSTtBQUN6QixRQUFJO0FBQ0ZDLDBCQUFHQyxRQUFILENBQVlGLElBQVo7O0FBQ0FGLE1BQUFBLFdBQVcsR0FBRztBQUFFLG1CQUFTRTtBQUFYLE9BQWQ7QUFDRCxLQUhELENBR0UsT0FBT0csR0FBUCxFQUFZLENBQ1o7QUFDRDtBQUNGLEdBUEQ7QUFTQSxTQUFPTCxXQUFQO0FBQ0QsQ0FuQkQ7O0FBcUJlLHdCQUE0QjtBQUFBLE1BQWpCTSxNQUFpQixRQUFqQkEsTUFBaUI7QUFBQSxNQUFUQyxLQUFTLFFBQVRBLEtBQVM7QUFDekMsTUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBRUEsTUFBTUMsY0FBYyxHQUFHSCxNQUFNLENBQUNJLEtBQVAsQ0FBYUMsSUFBYixDQUFrQkMsVUFBbEIsQ0FBNkJOLE1BQU0sQ0FBQ0ksS0FBUCxDQUFhRyxJQUExQyxDQUF2Qjs7QUFFQSxNQUFJLENBQUNKLGNBQUwsRUFBcUI7QUFDbkJELElBQUFBLFNBQVMsR0FBR1gsZUFBZSxDQUFDUyxNQUFNLENBQUNJLEtBQVAsQ0FBYUcsSUFBZCxDQUEzQjtBQUNEOztBQUVELFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFLGlCQUREO0FBRUxDLElBQUFBLE9BQU8sRUFBRSxDQUNQVCxNQUFNLENBQUNJLEtBQVAsQ0FBYU0sT0FETixFQUVQVixNQUFNLENBQUNJLEtBQVAsQ0FBYU8sR0FGTixFQUdQLDRCQUhPLEVBSVAsa0NBSk8sQ0FGSjtBQVFMQyxJQUFBQSxHQUFHLEVBQUUsQ0FDSDtBQUNFQyxNQUFBQSxNQUFNLEVBQUUsY0FEVjtBQUVFQyxNQUFBQSxPQUFPLG9CQUNGWixTQURFO0FBRUxWLFFBQUFBLElBQUksRUFBRVEsTUFBTSxDQUFDSSxLQUFQLENBQWFHLElBRmQ7QUFHTFEsUUFBQUEsT0FBTyxFQUFFLENBQUMsQ0FBQ0MsdUJBQUQsRUFBYztBQUFFQyxVQUFBQSxPQUFPLEVBQUU7QUFBWCxTQUFkLENBQUQsQ0FISjtBQUlMQyxRQUFBQSxjQUFjLEVBQUVmLGNBQWMsR0FBR0YsS0FBSyxLQUFLLE1BQWIsR0FBc0JELE1BQU0sQ0FBQ0ksS0FBUCxDQUFhZSxJQUo1RDtBQUtMQyxRQUFBQSxPQUFPLEVBQUVuQixLQUFLLEtBQUssTUFMZDtBQU1Mb0IsUUFBQUEsYUFBYSxFQUFFO0FBTlY7QUFGVCxLQURHLEVBWUgsMEJBWkc7QUFSQSxHQUFQO0FBdUJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xyXG5pbXBvcnQgYmFiZWxQcmVzZXQgZnJvbSAnLi4vLi4vLi4vLi4vYmFiZWwtcHJlc2V0J1xyXG5cclxuLy8gd2UgY2hlY2sgd2hpY2ggYmFiZWwgY29uZmlnIGZpbGUgZXhpc3RzIGluIHRoZSBwcm9qZWN0IHJvb3RcclxuY29uc3QgcmVhZEJhYmVsQ29uZmlnID0gcm9vdCA9PiB7XHJcbiAgY29uc3QgYmFiZWxGaWxlcyA9IFtcclxuICAgIGAke3Jvb3R9Ly5iYWJlbHJjYCxcclxuICAgIGAke3Jvb3R9Ly5iYWJlbHJjLmpzYCxcclxuICAgIGAke3Jvb3R9L2JhYmVsLmNvbmZpZy5qc2AsXHJcbiAgXVxyXG5cclxuICBsZXQgZXh0ZW5kc0ZpbGUgPSB7fVxyXG5cclxuICBiYWJlbEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBmcy5zdGF0U3luYyhmaWxlKVxyXG4gICAgICBleHRlbmRzRmlsZSA9IHsgZXh0ZW5kczogZmlsZSB9XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgLy8gZG9udCBkbyBhbnl0aGluZ1xyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gIHJldHVybiBleHRlbmRzRmlsZVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih7IGNvbmZpZywgc3RhZ2UgfSkge1xyXG4gIGxldCBiYWJlbEZpbGUgPSB7fVxyXG5cclxuICBjb25zdCBpc1JlbGF0aXZlUGF0aCA9IGNvbmZpZy5wYXRocy5ESVNULnN0YXJ0c1dpdGgoY29uZmlnLnBhdGhzLlJPT1QpXHJcblxyXG4gIGlmICghaXNSZWxhdGl2ZVBhdGgpIHtcclxuICAgIGJhYmVsRmlsZSA9IHJlYWRCYWJlbENvbmZpZyhjb25maWcucGF0aHMuUk9PVClcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB0ZXN0OiAvXFwuKGpzfGpzeHxtanMpJC8sXHJcbiAgICBpbmNsdWRlOiBbXHJcbiAgICAgIGNvbmZpZy5wYXRocy5QTFVHSU5TLFxyXG4gICAgICBjb25maWcucGF0aHMuU1JDLFxyXG4gICAgICAvcmVhY3Qtc3RhdGljLXRlbXBsYXRlc1xcLmpzLyxcclxuICAgICAgL3JlYWN0LXN0YXRpYy1icm93c2VyLXBsdWdpbnNcXC5qcy8sXHJcbiAgICBdLFxyXG4gICAgdXNlOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBsb2FkZXI6ICdiYWJlbC1sb2FkZXInLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgIC4uLmJhYmVsRmlsZSxcclxuICAgICAgICAgIHJvb3Q6IGNvbmZpZy5wYXRocy5ST09ULFxyXG4gICAgICAgICAgcHJlc2V0czogW1tiYWJlbFByZXNldCwgeyBtb2R1bGVzOiBmYWxzZSB9XV0sXHJcbiAgICAgICAgICBjYWNoZURpcmVjdG9yeTogaXNSZWxhdGl2ZVBhdGggPyBzdGFnZSAhPT0gJ3Byb2QnIDogY29uZmlnLnBhdGhzLlRFTVAsXHJcbiAgICAgICAgICBjb21wYWN0OiBzdGFnZSA9PT0gJ3Byb2QnLFxyXG4gICAgICAgICAgaGlnaGxpZ2h0Q29kZTogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICAncmVhY3QtaG90LWxvYWRlci93ZWJwYWNrJyxcclxuICAgIF0sXHJcbiAgfVxyXG59XHJcbiJdfQ==