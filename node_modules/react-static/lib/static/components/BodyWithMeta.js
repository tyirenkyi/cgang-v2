"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _jsesc = _interopRequireDefault(require("jsesc"));

var _utils = require("../../utils");

var generateRouteInformation = function generateRouteInformation(embeddedRouteInfo) {
  return {
    __html: "\n    window.__routeInfo = JSON.parse(".concat((0, _jsesc["default"])(JSON.stringify(embeddedRouteInfo), {
      isScriptContext: true,
      wrap: true,
      json: true
    }), ");")
  };
}; // Not only do we pass react-helmet attributes and the app.js here, but
// we also need to  hard code site props and route props into the page to
// prevent flashing when react mounts onto the HTML.


var makeBodyWithMeta =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(state) {
    var head, route, embeddedRouteInfo, _state$clientScripts, clientScripts;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            head = state.head, route = state.route, embeddedRouteInfo = state.embeddedRouteInfo, _state$clientScripts = state.clientScripts, clientScripts = _state$clientScripts === void 0 ? [] : _state$clientScripts; // This embeddedRouteInfo will be inlined into the HTML for this route.
            // It should only include the full props, not the partials.

            return _context.abrupt("return", function (_ref2) {
              var children = _ref2.children,
                  rest = (0, _objectWithoutProperties2["default"])(_ref2, ["children"]);
              return _react["default"].createElement("body", (0, _extends2["default"])({}, head.bodyProps, rest), children, !route.redirect ? _react["default"].createElement("script", {
                type: "text/javascript",
                dangerouslySetInnerHTML: generateRouteInformation(embeddedRouteInfo)
              }) : null, !route.redirect ? clientScripts.map(function (script) {
                return _react["default"].createElement("script", {
                  key: script,
                  defer: true,
                  type: "text/javascript",
                  src: (0, _utils.makePathAbsolute)((0, _utils.pathJoin)(process.env.REACT_STATIC_ASSETS_PATH, script))
                });
              }) : null);
            });

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function makeBodyWithMeta(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = makeBodyWithMeta;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0aWMvY29tcG9uZW50cy9Cb2R5V2l0aE1ldGEuanMiXSwibmFtZXMiOlsiZ2VuZXJhdGVSb3V0ZUluZm9ybWF0aW9uIiwiZW1iZWRkZWRSb3V0ZUluZm8iLCJfX2h0bWwiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNTY3JpcHRDb250ZXh0Iiwid3JhcCIsImpzb24iLCJtYWtlQm9keVdpdGhNZXRhIiwic3RhdGUiLCJoZWFkIiwicm91dGUiLCJjbGllbnRTY3JpcHRzIiwiY2hpbGRyZW4iLCJyZXN0IiwiYm9keVByb3BzIiwicmVkaXJlY3QiLCJtYXAiLCJzY3JpcHQiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfU1RBVElDX0FTU0VUU19QQVRIIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkIsQ0FBQUMsaUJBQWlCO0FBQUEsU0FBSztBQUNyREMsSUFBQUEsTUFBTSxrREFDOEIsdUJBQU1DLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxpQkFBZixDQUFOLEVBQXlDO0FBQ3pFSSxNQUFBQSxlQUFlLEVBQUUsSUFEd0Q7QUFFekVDLE1BQUFBLElBQUksRUFBRSxJQUZtRTtBQUd6RUMsTUFBQUEsSUFBSSxFQUFFO0FBSG1FLEtBQXpDLENBRDlCO0FBRCtDLEdBQUw7QUFBQSxDQUFsRCxDLENBU0E7QUFDQTtBQUNBOzs7QUFDQSxJQUFNQyxnQkFBZ0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLCtCQUFHLGlCQUFNQyxLQUFOO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDZkMsWUFBQUEsSUFEZSxHQUN3Q0QsS0FEeEMsQ0FDZkMsSUFEZSxFQUNUQyxLQURTLEdBQ3dDRixLQUR4QyxDQUNURSxLQURTLEVBQ0ZWLGlCQURFLEdBQ3dDUSxLQUR4QyxDQUNGUixpQkFERSx5QkFDd0NRLEtBRHhDLENBQ2lCRyxhQURqQixFQUNpQkEsYUFEakIscUNBQ2lDLEVBRGpDLHlCQUd2QjtBQUNBOztBQUp1Qiw2Q0FNaEI7QUFBQSxrQkFBR0MsUUFBSCxTQUFHQSxRQUFIO0FBQUEsa0JBQWdCQyxJQUFoQjtBQUFBLHFCQUNMLHNFQUFVSixJQUFJLENBQUNLLFNBQWYsRUFBOEJELElBQTlCLEdBQ0dELFFBREgsRUFFRyxDQUFDRixLQUFLLENBQUNLLFFBQVAsR0FDQztBQUNFLGdCQUFBLElBQUksRUFBQyxpQkFEUDtBQUVFLGdCQUFBLHVCQUF1QixFQUFFaEIsd0JBQXdCLENBQUNDLGlCQUFEO0FBRm5ELGdCQURELEdBS0csSUFQTixFQVFHLENBQUNVLEtBQUssQ0FBQ0ssUUFBUCxHQUNHSixhQUFhLENBQUNLLEdBQWQsQ0FBa0IsVUFBQUMsTUFBTTtBQUFBLHVCQUN0QjtBQUNFLGtCQUFBLEdBQUcsRUFBRUEsTUFEUDtBQUVFLGtCQUFBLEtBQUssTUFGUDtBQUdFLGtCQUFBLElBQUksRUFBQyxpQkFIUDtBQUlFLGtCQUFBLEdBQUcsRUFBRSw2QkFDSCxxQkFBU0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLHdCQUFyQixFQUErQ0gsTUFBL0MsQ0FERztBQUpQLGtCQURzQjtBQUFBLGVBQXhCLENBREgsR0FXRyxJQW5CTixDQURLO0FBQUEsYUFOZ0I7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBSDs7QUFBQSxrQkFBaEJWLGdCQUFnQjtBQUFBO0FBQUE7QUFBQSxHQUF0Qjs7ZUErQmVBLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGpzZXNjIGZyb20gJ2pzZXNjJ1xuaW1wb3J0IHsgcGF0aEpvaW4sIG1ha2VQYXRoQWJzb2x1dGUgfSBmcm9tICcuLi8uLi91dGlscydcblxuY29uc3QgZ2VuZXJhdGVSb3V0ZUluZm9ybWF0aW9uID0gZW1iZWRkZWRSb3V0ZUluZm8gPT4gKHtcbiAgX19odG1sOiBgXG4gICAgd2luZG93Ll9fcm91dGVJbmZvID0gSlNPTi5wYXJzZSgke2pzZXNjKEpTT04uc3RyaW5naWZ5KGVtYmVkZGVkUm91dGVJbmZvKSwge1xuICAgICAgaXNTY3JpcHRDb250ZXh0OiB0cnVlLFxuICAgICAgd3JhcDogdHJ1ZSxcbiAgICAgIGpzb246IHRydWUsXG4gICAgfSl9KTtgLFxufSlcblxuLy8gTm90IG9ubHkgZG8gd2UgcGFzcyByZWFjdC1oZWxtZXQgYXR0cmlidXRlcyBhbmQgdGhlIGFwcC5qcyBoZXJlLCBidXRcbi8vIHdlIGFsc28gbmVlZCB0byAgaGFyZCBjb2RlIHNpdGUgcHJvcHMgYW5kIHJvdXRlIHByb3BzIGludG8gdGhlIHBhZ2UgdG9cbi8vIHByZXZlbnQgZmxhc2hpbmcgd2hlbiByZWFjdCBtb3VudHMgb250byB0aGUgSFRNTC5cbmNvbnN0IG1ha2VCb2R5V2l0aE1ldGEgPSBhc3luYyBzdGF0ZSA9PiB7XG4gIGNvbnN0IHsgaGVhZCwgcm91dGUsIGVtYmVkZGVkUm91dGVJbmZvLCBjbGllbnRTY3JpcHRzID0gW10gfSA9IHN0YXRlXG5cbiAgLy8gVGhpcyBlbWJlZGRlZFJvdXRlSW5mbyB3aWxsIGJlIGlubGluZWQgaW50byB0aGUgSFRNTCBmb3IgdGhpcyByb3V0ZS5cbiAgLy8gSXQgc2hvdWxkIG9ubHkgaW5jbHVkZSB0aGUgZnVsbCBwcm9wcywgbm90IHRoZSBwYXJ0aWFscy5cblxuICByZXR1cm4gKHsgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4gKFxuICAgIDxib2R5IHsuLi5oZWFkLmJvZHlQcm9wc30gey4uLnJlc3R9PlxuICAgICAge2NoaWxkcmVufVxuICAgICAgeyFyb3V0ZS5yZWRpcmVjdCA/IChcbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIlxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXtnZW5lcmF0ZVJvdXRlSW5mb3JtYXRpb24oZW1iZWRkZWRSb3V0ZUluZm8pfVxuICAgICAgICAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgICB7IXJvdXRlLnJlZGlyZWN0XG4gICAgICAgID8gY2xpZW50U2NyaXB0cy5tYXAoc2NyaXB0ID0+IChcbiAgICAgICAgICAgIDxzY3JpcHRcbiAgICAgICAgICAgICAga2V5PXtzY3JpcHR9XG4gICAgICAgICAgICAgIGRlZmVyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIlxuICAgICAgICAgICAgICBzcmM9e21ha2VQYXRoQWJzb2x1dGUoXG4gICAgICAgICAgICAgICAgcGF0aEpvaW4ocHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX0FTU0VUU19QQVRILCBzY3JpcHQpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpXG4gICAgICAgIDogbnVsbH1cbiAgICA8L2JvZHk+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFrZUJvZHlXaXRoTWV0YVxuIl19