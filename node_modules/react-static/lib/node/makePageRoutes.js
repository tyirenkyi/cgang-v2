"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = makePageRoutes;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function makePageRoutes(_ref) {
  var items = _ref.items,
      pageSize = _ref.pageSize,
      _ref$pageToken = _ref.pageToken,
      pageToken = _ref$pageToken === void 0 ? 'page' : _ref$pageToken,
      route = _ref.route,
      decorate = _ref.decorate;
  var itemsCopy = (0, _toConsumableArray2["default"])(items); // Make a copy of the items

  var pages = []; // Make an array for all of the different pages

  while (itemsCopy.length) {
    // Splice out all of the items into separate pages using a set pageSize
    pages.push(itemsCopy.splice(0, pageSize));
  }

  var totalPages = pages.length; // Move the first page out of pagination. This is so page one doesn't require a page number.

  var firstPage = pages[0];
  var routes = [_objectSpread({}, route, {}, decorate(firstPage, 1, totalPages))].concat((0, _toConsumableArray2["default"])(pages.map(function (page, i) {
    return _objectSpread({}, route, {
      // route defaults
      path: "".concat(route.path, "/").concat(pageToken, "/").concat(i + 1)
    }, decorate(page, i + 1, totalPages));
  })));
  return routes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlL21ha2VQYWdlUm91dGVzLmpzIl0sIm5hbWVzIjpbIm1ha2VQYWdlUm91dGVzIiwiaXRlbXMiLCJwYWdlU2l6ZSIsInBhZ2VUb2tlbiIsInJvdXRlIiwiZGVjb3JhdGUiLCJpdGVtc0NvcHkiLCJwYWdlcyIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiLCJ0b3RhbFBhZ2VzIiwiZmlyc3RQYWdlIiwicm91dGVzIiwibWFwIiwicGFnZSIsImkiLCJwYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLGNBQVQsT0FNWjtBQUFBLE1BTERDLEtBS0MsUUFMREEsS0FLQztBQUFBLE1BSkRDLFFBSUMsUUFKREEsUUFJQztBQUFBLDRCQUhEQyxTQUdDO0FBQUEsTUFIREEsU0FHQywrQkFIVyxNQUdYO0FBQUEsTUFGREMsS0FFQyxRQUZEQSxLQUVDO0FBQUEsTUFEREMsUUFDQyxRQUREQSxRQUNDO0FBQ0QsTUFBTUMsU0FBUyx1Q0FBT0wsS0FBUCxDQUFmLENBREMsQ0FDNEI7O0FBQzdCLE1BQU1NLEtBQUssR0FBRyxFQUFkLENBRkMsQ0FFZ0I7O0FBRWpCLFNBQU9ELFNBQVMsQ0FBQ0UsTUFBakIsRUFBeUI7QUFDdkI7QUFDQUQsSUFBQUEsS0FBSyxDQUFDRSxJQUFOLENBQVdILFNBQVMsQ0FBQ0ksTUFBVixDQUFpQixDQUFqQixFQUFvQlIsUUFBcEIsQ0FBWDtBQUNEOztBQUVELE1BQU1TLFVBQVUsR0FBR0osS0FBSyxDQUFDQyxNQUF6QixDQVRDLENBV0Q7O0FBQ0EsTUFBTUksU0FBUyxHQUFHTCxLQUFLLENBQUMsQ0FBRCxDQUF2QjtBQUVBLE1BQU1NLE1BQU0sc0JBRUxULEtBRkssTUFHTEMsUUFBUSxDQUFDTyxTQUFELEVBQVksQ0FBWixFQUFlRCxVQUFmLENBSEgsOENBTVBKLEtBQUssQ0FBQ08sR0FBTixDQUFVLFVBQUNDLElBQUQsRUFBT0MsQ0FBUDtBQUFBLDZCQUNSWixLQURRO0FBQ0Q7QUFDVmEsTUFBQUEsSUFBSSxZQUFLYixLQUFLLENBQUNhLElBQVgsY0FBbUJkLFNBQW5CLGNBQWdDYSxDQUFDLEdBQUcsQ0FBcEM7QUFGTyxPQUdSWCxRQUFRLENBQUNVLElBQUQsRUFBT0MsQ0FBQyxHQUFHLENBQVgsRUFBY0wsVUFBZCxDQUhBO0FBQUEsR0FBVixDQU5PLEVBQVo7QUFhQSxTQUFPRSxNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlUGFnZVJvdXRlcyh7XHJcbiAgaXRlbXMsXHJcbiAgcGFnZVNpemUsXHJcbiAgcGFnZVRva2VuID0gJ3BhZ2UnLFxyXG4gIHJvdXRlLFxyXG4gIGRlY29yYXRlLFxyXG59KSB7XHJcbiAgY29uc3QgaXRlbXNDb3B5ID0gWy4uLml0ZW1zXSAvLyBNYWtlIGEgY29weSBvZiB0aGUgaXRlbXNcclxuICBjb25zdCBwYWdlcyA9IFtdIC8vIE1ha2UgYW4gYXJyYXkgZm9yIGFsbCBvZiB0aGUgZGlmZmVyZW50IHBhZ2VzXHJcblxyXG4gIHdoaWxlIChpdGVtc0NvcHkubGVuZ3RoKSB7XHJcbiAgICAvLyBTcGxpY2Ugb3V0IGFsbCBvZiB0aGUgaXRlbXMgaW50byBzZXBhcmF0ZSBwYWdlcyB1c2luZyBhIHNldCBwYWdlU2l6ZVxyXG4gICAgcGFnZXMucHVzaChpdGVtc0NvcHkuc3BsaWNlKDAsIHBhZ2VTaXplKSlcclxuICB9XHJcblxyXG4gIGNvbnN0IHRvdGFsUGFnZXMgPSBwYWdlcy5sZW5ndGhcclxuXHJcbiAgLy8gTW92ZSB0aGUgZmlyc3QgcGFnZSBvdXQgb2YgcGFnaW5hdGlvbi4gVGhpcyBpcyBzbyBwYWdlIG9uZSBkb2Vzbid0IHJlcXVpcmUgYSBwYWdlIG51bWJlci5cclxuICBjb25zdCBmaXJzdFBhZ2UgPSBwYWdlc1swXVxyXG5cclxuICBjb25zdCByb3V0ZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIC4uLnJvdXRlLFxyXG4gICAgICAuLi5kZWNvcmF0ZShmaXJzdFBhZ2UsIDEsIHRvdGFsUGFnZXMpLCAvLyBhbmQgb25seSBwYXNzIHRoZSBmaXJzdCBwYWdlIGFzIGRhdGFcclxuICAgIH0sXHJcbiAgICAvLyBtYXAgb3ZlciBlYWNoIHBhZ2UgdG8gY3JlYXRlIGFuIGFycmF5IG9mIHBhZ2Ugcm91dGVzLCBhbmQgc3ByZWFkIGl0IVxyXG4gICAgLi4ucGFnZXMubWFwKChwYWdlLCBpKSA9PiAoe1xyXG4gICAgICAuLi5yb3V0ZSwgLy8gcm91dGUgZGVmYXVsdHNcclxuICAgICAgcGF0aDogYCR7cm91dGUucGF0aH0vJHtwYWdlVG9rZW59LyR7aSArIDF9YCxcclxuICAgICAgLi4uZGVjb3JhdGUocGFnZSwgaSArIDEsIHRvdGFsUGFnZXMpLFxyXG4gICAgfSkpLFxyXG4gIF1cclxuXHJcbiAgcmV0dXJuIHJvdXRlc1xyXG59XHJcbiJdfQ==