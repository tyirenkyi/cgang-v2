"use strict";

var path = require('path');

var PrettyError = require('pretty-error');

var resolveFrom = require('resolve-from');

var Module = require('module'); //


var _require = require('./'),
    escapeRegExp = _require.escapeRegExp; // Allow as much stack tracing as possible


Error.stackTraceLimit = 10000;
var ignorePath;
var originalRequire = Module.prototype.require; // Check and see if we are running react-static from the repo

var needsWorkspaceCheck = __dirname.includes('/react-static/packages/react-static/'); // Recursively checks a module to see if it originated from a
// react-static package in the repo


var inRepo = function inRepo(mod) {
  if (!mod.filename.includes('react-static/packages/react-static/') && mod.filename.includes('react-static/packages/')) {
    return true;
  }

  if (mod.parent) {
    return inRepo(mod.parent);
  }

  return false;
}; // The following ensures that there is always only a single (and same)
// copy of React in an app at any given moment.
// eslint-disable-next-line


Module.prototype.require = function (modulePath) {
  // If we are running in the repo, we need to make sure
  // module resolutions coming from other react-static packages
  // are first attempted from the
  var isInWorkspace = needsWorkspaceCheck && inRepo(this); // Only redirect resolutions to non-relative and non-absolute modules

  if (!modulePath.startsWith('.') && !modulePath.startsWith('/')) {
    if ( // If module is in the repo try and redirect
    isInWorkspace || // Always try and redirect react and react-dom resolutions
    ['react', 'react-dom'].some(function (d) {
      return modulePath.includes(d);
    })) {
      try {
        modulePath = resolveFrom(path.resolve(process.cwd(), 'node_modules'), modulePath);
      } catch (err) {//
      }
    }
  }

  return originalRequire.call(this, modulePath);
};

require('@babel/register')({
  babelrc: false,
  presets: [[path.resolve(__dirname, '../../babel-preset.js'), {
    node: true
  }]],
  ignore: [function babelIgnore(filename) {
    // true if should ignore
    return new RegExp(escapeRegExp("".concat(path.sep, "node_modules").concat(path.sep))).test(filename) || ignorePath && ignorePath.test(filename);
  }]
}); // necessary at any entry point of the cli to ensure that Babel-register
// does not attempt to transform non JavaScript files.


var ignoredExtensions = ['css', 'scss', 'styl', 'less', 'png', 'gif', 'jpg', 'jpeg', 'svg', 'woff', 'woff2', 'ttf', 'eot', 'otf', 'mp4', 'webm', 'ogg', 'mp3', 'wav', 'md', 'yaml'];
ignoredExtensions.forEach(function (ext) {
  require.extensions[".".concat(ext)] = function () {};
});

console.error = function (err) {
  var _console;

  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  (_console = console).log.apply(_console, [new PrettyError().render(err)].concat(rest));
}; // Be sure to log useful information about unhandled exceptions. This should seriously
// be a default: https://github.com/nodejs/node/issues/9523#issuecomment-259303079


process.on('unhandledRejection', function (r) {
  console.error(r);
});
module.exports = {
  setIgnorePath: function setIgnorePath(path) {
    ignorePath = path ? new RegExp(escapeRegExp(path)) : undefined;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,